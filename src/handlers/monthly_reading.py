from aiogram import Router, types
from aiogram.filters import Text
from src.config import MONTHLY_READING_PROMPT_RU, MONTHLY_READING_PROMPT_EN, WEBAPP_URL
from src.database.models import User
from src.openai_client import get_openai_response
from data.tarot_cards import TAROT_CARDS
import json
import logging

router = Router()
logger = logging.getLogger(__name__)

@router.message(Text("üìÖ –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –º–µ—Å—è—Ü"))
async def handle_monthly_reading(message: types.Message):
    user = await User.get_or_create(telegram_id=message.from_user.id)
    if not user.is_subscribed:
        await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
        return

    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –º–µ—Å—è—Ü",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="–û—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–∫–ª–∞–¥",
                        web_app=types.WebAppInfo(url=f"{WEBAPP_URL}/monthly_reading")
                    )
                ]
            ]
        )
    )

@router.message(lambda message: message.web_app_data and "monthly_reading" in message.web_app_data.url)
async def handle_monthly_reading_selection(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        selected_cards = data.get("selected_cards", [])
        
        if len(selected_cards) != 6:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 6 –∫–∞—Ä—Ç –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö
        cards_info = []
        for card_id in selected_cards:
            card = TAROT_CARDS.get(str(card_id))
            if card:
                cards_info.append(f"{card['name']}: {card['description']}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç –¥–ª—è GPT
        prompt = f"{MONTHLY_READING_PROMPT_RU}\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:\n" + "\n".join(cards_info)

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
        response = await get_openai_response(prompt)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ –º–µ—Å—è—Ü: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 
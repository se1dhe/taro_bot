from aiogram import Router, types, F
from src.config import MONTHLY_READING_PROMPT_RU, MONTHLY_READING_PROMPT_EN, WEBAPP_URL
from src.database.models import User
from src.openai_client import get_openai_response
import json
import logging
import os
from aiogram.types import WebAppInfo
from keyboards.reply import get_main_keyboard
from sqlalchemy import select
from src.database.database import async_session_maker
from datetime import datetime

router = Router()
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DEFAULT_LANGUAGE = 'ru'

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
IMAGES_DIR = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 'webapp', 'static', 'images')

def get_monthly_reading_month() -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ—Å—è—Ü –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã.
    –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ —Å 16 —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞ –ø–æ 15 —á–∏—Å–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞,
    —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü.
    """
    now = datetime.now()
    current_day = now.day
    
    if current_day >= 16:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å >= 16, —Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        next_month = now.month + 1
        if next_month > 12:
            next_month = 1
        month_names = {
            1: "—è–Ω–≤–∞—Ä—å", 2: "—Ñ–µ–≤—Ä–∞–ª—å", 3: "–º–∞—Ä—Ç", 4: "–∞–ø—Ä–µ–ª—å",
            5: "–º–∞–π", 6: "–∏—é–Ω—å", 7: "–∏—é–ª—å", 8: "–∞–≤–≥—É—Å—Ç",
            9: "—Å–µ–Ω—Ç—è–±—Ä—å", 10: "–æ–∫—Ç—è–±—Ä—å", 11: "–Ω–æ—è–±—Ä—å", 12: "–¥–µ–∫–∞–±—Ä—å"
        }
        return month_names[next_month]
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å < 16, —Ç–æ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        month_names = {
            1: "—è–Ω–≤–∞—Ä—å", 2: "—Ñ–µ–≤—Ä–∞–ª—å", 3: "–º–∞—Ä—Ç", 4: "–∞–ø—Ä–µ–ª—å",
            5: "–º–∞–π", 6: "–∏—é–Ω—å", 7: "–∏—é–ª—å", 8: "–∞–≤–≥—É—Å—Ç",
            9: "—Å–µ–Ω—Ç—è–±—Ä—å", 10: "–æ–∫—Ç—è–±—Ä—å", 11: "–Ω–æ—è–±—Ä—å", 12: "–¥–µ–∫–∞–±—Ä—å"
        }
        return month_names[now.month]

@router.message(F.text == "üìÖ –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –º–µ—Å—è—Ü")
async def handle_monthly_reading(message: types.Message):
    logger.info("=============================")
    logger.info("========= –í–ï–†–°–ò–Ø: 2 =========")
    logger.info("=============================")
    user = await User.get_or_create(telegram_id=message.from_user.id)
    if not user.is_subscribed:
        await message.answer("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
        return

    month = get_monthly_reading_month()
    await message.answer(
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ {month}",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=f"–û—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ {month}",
                        web_app=types.WebAppInfo(url=f"{WEBAPP_URL}/monthly_reading")
                    )
                ]
            ]
        )
    )

@router.message(lambda message: message.web_app_data is not None)
async def handle_monthly_reading_selection(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç –¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞."""
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        data = json.loads(message.web_app_data.data)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        logger.info(f"–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
        
        if not isinstance(data, list):
            logger.error(f"–û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫, –ø–æ–ª—É—á–µ–Ω {type(data)}")
            await message.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
            
        cards_info = []
        cards_images = []
        
        for i, card_data in enumerate(data):
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç—ã {i + 1}: {card_data}")
            logger.info(f"–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã: {type(card_data)}")
            
            if not isinstance(card_data, dict):
                logger.error(f"–û–∂–∏–¥–∞–ª—Å—è —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–∞—Ä—Ç—ã {i + 1}, –ø–æ–ª—É—á–µ–Ω {type(card_data)}")
                continue
                
            try:
                path = card_data['path']
                is_reversed = card_data.get('isReversed', False)
            except KeyError as e:
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ {e} –¥–ª—è –∫–∞—Ä—Ç—ã {i + 1}")
                continue
            
            logger.info(f"–ü—É—Ç—å –∫ –∫–∞—Ä—Ç–µ: {path}, –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞: {is_reversed}")
            
            if not path:
                logger.error(f"–ü—É—Ç—å –∫ –∫–∞—Ä—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–∞—Ä—Ç—ã {i + 1}")
                continue
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ –∏–∑ –ø—É—Ç–∏
            parts = path.split('/')
            if 'major' in path:
                card_number = int(parts[-1].split('.')[0])
                card_info = f"–°—Ç–∞—Ä—à–∏–π –∞—Ä–∫–∞–Ω {card_number}"
                if is_reversed:
                    card_info += " (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)"
            else:
                suit = parts[-2]  # cups, wands, etc.
                card_number = int(parts[-1].split('.')[0])
                card_info = f"{suit.capitalize()} {card_number}"
                if is_reversed:
                    card_info += " (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)"
            
            cards_info.append(card_info)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            if 'major' in path:
                image_path = os.path.join(IMAGES_DIR, 'major', f"{card_number}.jpg")
            else:
                image_path = os.path.join(IMAGES_DIR, 'minor', suit, f"{card_number}.jpg")
            cards_images.append(image_path)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∞: {card_info}")
            logger.info(f"–ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {image_path}")

        if not cards_info:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∞—Ö")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        logger.info(f"–°–æ–±—Ä–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–∞—Ö: {cards_info}")
        logger.info(f"–ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º: {cards_images}")

        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with async_session_maker() as session:
            result = await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                user = User(telegram_id=message.from_user.id, language=DEFAULT_LANGUAGE)
                session.add(user)
                await session.commit()
                
        user_language = user.language or DEFAULT_LANGUAGE
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–º—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
        prompt = MONTHLY_READING_PROMPT_RU if user_language == 'ru' else MONTHLY_READING_PROMPT_EN
        prompt += "\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:\n" + "\n".join(cards_info)
        logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º—Ç: {prompt}")

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
        response = await get_openai_response(prompt)
        logger.info("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç GPT")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        message_text = (
            f"üîÆ –í–∞—à –º–µ—Å—è—á–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥:\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:\n" + "\n".join([f"‚Ä¢ {card}" for card in cards_info]) +
            f"\n\nüìù –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:\n\n{response}"
        )
        
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            message_text,
            reply_markup=get_main_keyboard()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç
        for image_path in cards_images:
            try:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path}")
                if not os.path.exists(image_path):
                    logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
                    continue
                with open(image_path, 'rb') as photo:
                    await message.answer_photo(photo)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_keyboard()
        )
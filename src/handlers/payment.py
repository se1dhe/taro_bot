"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, LabeledPrice, PreCheckoutQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from src.config import (
    TARIFF_SMALL_PRICE_STARS, TARIFF_SMALL_READINGS,
    TARIFF_MEDIUM_PRICE_STARS, TARIFF_MEDIUM_READINGS,
    TARIFF_UNLIMITED_PRICE_STARS,
    ROBOKASSA_LOGIN, ROBOKASSA_PASSWORD1, ROBOKASSA_TEST_MODE
)
from src.keyboards.payment import get_payment_menu, get_payment_methods_keyboard
from src.database.database import get_user, update_user_readings
import uuid
from urllib.parse import urlencode
from hashlib import md5

router = Router()

class PaymentStates(StatesGroup):
    waiting_for_payment = State()

@router.message(F.text == "üí´ –ö—É–ø–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã")
async def handle_buy_subscription(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫—É–ø–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
        reply_markup=get_payment_menu()
    )

@router.callback_query(F.data.startswith("buy_"))
async def process_buy(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞"""
    tariff = callback.data.split("_")[1]
    payment_id = str(uuid.uuid4())
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞
    if tariff == "small":
        price = TARIFF_SMALL_PRICE_STARS
        readings = TARIFF_SMALL_READINGS
        title = "–¢–∞—Ä–∏—Ñ '–ú–∞–ª—ã–π'"
    elif tariff == "medium":
        price = TARIFF_MEDIUM_PRICE_STARS
        readings = TARIFF_MEDIUM_READINGS
        title = "–¢–∞—Ä–∏—Ñ '–°—Ä–µ–¥–Ω–∏–π'"
    else:
        price = TARIFF_UNLIMITED_PRICE_STARS
        readings = -1  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π
        title = "–¢–∞—Ä–∏—Ñ '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π'"
    
    await state.set_state(PaymentStates.waiting_for_payment)
    await state.update_data(tariff=tariff, payment_id=payment_id, price=price, readings=readings)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Robokassa
    merchant_login = ROBOKASSA_LOGIN
    password1 = ROBOKASSA_PASSWORD1
    
    signature = f"{merchant_login}:{price}:{payment_id}:{password1}"
    signature_hash = md5(signature.encode()).hexdigest()
    
    params = {
        "MerchantLogin": merchant_login,
        "OutSum": price,
        "InvId": payment_id,
        "Description": f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {title}",
        "SignatureValue": signature_hash,
        "IsTest": 1 if ROBOKASSA_TEST_MODE else 0
    }
    
    robokassa_url = f"https://auth.robokassa.ru/Merchant/Index.aspx?{urlencode(params)}"
    
    await callback.message.edit_text(
        f"–¢–∞—Ä–∏—Ñ '{title}'\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤: {readings if readings != -1 else '–±–µ–∑–ª–∏–º–∏—Ç–Ω–æ'}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} ‚≠êÔ∏è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_methods_keyboard(payment_id, tariff, robokassa_url)
    )

@router.callback_query(F.data.startswith("pay_stars_"))
async def process_stars_payment(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏"""
    data = await state.get_data()
    price = data.get("price")
    readings = data.get("readings")
    title = {
        "small": "–¢–∞—Ä–∏—Ñ '–ú–∞–ª—ã–π'",
        "medium": "–¢–∞—Ä–∏—Ñ '–°—Ä–µ–¥–Ω–∏–π'",
        "unlimited": "–¢–∞—Ä–∏—Ñ '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π'"
    }[data.get("tariff")]
    
    await callback.message.answer_invoice(
        title=title,
        description=f"–ü–æ–∫—É–ø–∫–∞ {readings if readings != -1 else '–±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞'} —Ä–∞—Å–∫–ª–∞–¥–æ–≤",
        payload=data.get("payment_id"),
        provider_token="",  # –î–ª—è Stars –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
        currency="XTR",
        prices=[LabeledPrice(label="XTR", amount=price)],
        start_parameter=data.get("payment_id")
    )

@router.pre_checkout_query()
async def process_pre_checkout(pre_checkout_query: PreCheckoutQuery):
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    await pre_checkout_query.answer(ok=True)

@router.message(F.successful_payment)
async def process_successful_payment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment_data = await state.get_data()
    readings = payment_data.get("readings")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = await get_user(message.from_user.id, message.bot.get("db"))
    
    if user:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        current_readings = user.readings_left if user.readings_left != -1 else 0
        new_readings = -1 if readings == -1 or current_readings == -1 else current_readings + readings
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
        await update_user_readings(user.id, new_readings, message.bot.get("db"))
        
        await message.answer(
            f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ "
            f"{'–±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' if new_readings == -1 else str(new_readings)} —Ä–∞—Å–∫–ª–∞–¥–æ–≤."
        )
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    
    await state.clear()

@router.message(Command("paysupport"))
async def handle_pay_support(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º"""
    await message.answer(
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–ø–ª–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support"
    ) 
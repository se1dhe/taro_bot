"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, LabeledPrice, PreCheckoutQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from src.config import (
    TARIFF_SMALL_PRICE_STARS, TARIFF_SMALL_READINGS,
    TARIFF_MEDIUM_PRICE_STARS, TARIFF_MEDIUM_READINGS,
    TARIFF_UNLIMITED_PRICE_STARS,
    TARIFF_SMALL_PRICE_RUB, TARIFF_MEDIUM_PRICE_RUB, TARIFF_UNLIMITED_PRICE_RUB,
    ROBOKASSA_LOGIN, ROBOKASSA_PASSWORD1, ROBOKASSA_TEST_MODE,
    TAROT_SETTINGS, BOT_USERNAME
)
from src.keyboards.payment import get_payment_menu, get_payment_methods_keyboard
from src.database.database import get_user, update_user_readings
from src.database.models import User, Payment
import uuid
from urllib.parse import urlencode
from hashlib import md5

router = Router()

class PaymentStates(StatesGroup):
    waiting_for_payment = State()

@router.message(F.text == "üí´ –ö—É–ø–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã")
async def handle_buy_subscription(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫—É–ø–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await get_user(message.from_user.id, session)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
        reply_markup=get_payment_menu(user)
    )

@router.callback_query(F.data == "get_free_readings")
async def handle_get_free_readings(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ'"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await get_user(callback.from_user.id, session)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    total_referral_payments = 0
    if user.referrals_count > 0:
        referrals = await session.execute(
            select(User).where(User.referral_id == user.id)
        )
        referrals = referrals.scalars().all()
        
        for referral in referrals:
            payments = await session.execute(
                select(Payment).where(Payment.user_id == referral.id)
            )
            payments = payments.scalars().all()
            total_referral_payments += sum(payment.amount for payment in payments)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    referral_link = f"https://t.me/{BOT_USERNAME}?start=ref_{user.id}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="back_to_tariffs"
                )
            ]
        ]
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
    await callback.message.edit_text(
        "üéÅ –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã, –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π!\n\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user.referrals_count}\n"
        f"üí∞ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referral_payments} ‚≠êÔ∏è\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{referral_link}",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "back_to_tariffs")
async def handle_back_to_tariffs(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await get_user(callback.from_user.id, session)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
        reply_markup=get_payment_menu(user)
    )

@router.callback_query(F.data == "show_referrals")
async def handle_show_referrals(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤'"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await get_user(callback.from_user.id, session)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
    await callback.message.edit_text(
        f"üë• –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user.referrals_count}\n"
        f"–ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤: {user.referrals_count * TAROT_SETTINGS['referral_bonus_readings']}\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤!",
        reply_markup=get_referral_info_keyboard(user)
    )

@router.callback_query(F.data == "show_bonuses")
async def handle_show_bonuses(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–Ω—É—Å—ã'"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await get_user(callback.from_user.id, session)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–Ω—É—Å–∞—Ö
    await callback.message.edit_text(
        "üéÅ –ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:\n\n"
        f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {TAROT_SETTINGS['referral_bonus_readings']} —Ä–∞—Å–∫–ª–∞–¥–æ–≤.\n"
        f"–£ –≤–∞—Å —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ {user.referrals_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤: {user.referrals_count * TAROT_SETTINGS['referral_bonus_readings']}\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤!",
        reply_markup=get_referral_info_keyboard(user)
    )

@router.callback_query(F.data.startswith("buy_"))
async def process_buy(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞"""
    tariff = callback.data.split("_")[1]
    payment_id = str(uuid.uuid4())
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞
    if tariff == "small":
        price_rub = TARIFF_SMALL_PRICE_RUB
        price_stars = TARIFF_SMALL_PRICE_STARS
        readings = TARIFF_SMALL_READINGS
        title = "–¢–∞—Ä–∏—Ñ '–ú–∞–ª—ã–π'"
    elif tariff == "medium":
        price_rub = TARIFF_MEDIUM_PRICE_RUB
        price_stars = TARIFF_MEDIUM_PRICE_STARS
        readings = TARIFF_MEDIUM_READINGS
        title = "–¢–∞—Ä–∏—Ñ '–°—Ä–µ–¥–Ω–∏–π'"
    else:
        price_rub = TARIFF_UNLIMITED_PRICE_RUB
        price_stars = TARIFF_UNLIMITED_PRICE_STARS
        readings = -1  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π
        title = "–¢–∞—Ä–∏—Ñ '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π'"
    
    await state.set_state(PaymentStates.waiting_for_payment)
    await state.update_data(
        tariff=tariff, 
        payment_id=payment_id, 
        price_rub=price_rub,
        price_stars=price_stars,
        readings=readings
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Robokassa
    merchant_login = ROBOKASSA_LOGIN
    password1 = ROBOKASSA_PASSWORD1
    
    signature = f"{merchant_login}:{price_rub}:{payment_id}:{password1}"
    signature_hash = md5(signature.encode()).hexdigest()
    
    params = {
        "MerchantLogin": merchant_login,
        "OutSum": price_rub,
        "InvId": payment_id,
        "Description": f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {title}",
        "SignatureValue": signature_hash,
        "IsTest": 1 if ROBOKASSA_TEST_MODE else 0
    }
    
    robokassa_url = f"https://auth.robokassa.ru/Merchant/Index.aspx?{urlencode(params)}"
    
    await callback.message.edit_text(
        f"–¢–∞—Ä–∏—Ñ '{title}'\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤: {readings if readings != -1 else '–±–µ–∑–ª–∏–º–∏—Ç–Ω–æ'}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price_rub}‚ÇΩ / {price_stars}‚≠êÔ∏è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_methods_keyboard(payment_id, tariff, robokassa_url)
    )

@router.callback_query(F.data.startswith("pay_stars_"))
async def process_stars_payment(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏"""
    data = await state.get_data()
    price_stars = data.get("price_stars")
    readings = data.get("readings")
    title = {
        "small": "–¢–∞—Ä–∏—Ñ '–ú–∞–ª—ã–π'",
        "medium": "–¢–∞—Ä–∏—Ñ '–°—Ä–µ–¥–Ω–∏–π'",
        "unlimited": "–¢–∞—Ä–∏—Ñ '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π'"
    }[data.get("tariff")]
    
    await callback.message.answer_invoice(
        title=title,
        description=f"–ü–æ–∫—É–ø–∫–∞ {readings if readings != -1 else '–±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞'} —Ä–∞—Å–∫–ª–∞–¥–æ–≤",
        payload=data.get("payment_id"),
        provider_token="",  # –î–ª—è Stars –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
        currency="XTR",
        prices=[LabeledPrice(label="XTR", amount=price_stars)],
        start_parameter=data.get("payment_id")
    )

@router.pre_checkout_query()
async def process_pre_checkout(pre_checkout_query: PreCheckoutQuery):
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    await pre_checkout_query.answer(ok=True)

@router.message(F.successful_payment)
async def process_successful_payment(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment_data = await state.get_data()
    readings = payment_data.get("readings")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = await get_user(message.from_user.id, session)
    
    if user:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        current_readings = user.readings_left if user.readings_left != -1 else 0
        new_readings = -1 if readings == -1 or current_readings == -1 else current_readings + readings
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
        await update_user_readings(user.id, new_readings, session)
        
        await message.answer(
            f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ "
            f"{'–±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' if new_readings == -1 else str(new_readings)} —Ä–∞—Å–∫–ª–∞–¥–æ–≤."
        )
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    
    await state.clear()

@router.message(Command("paysupport"))
async def handle_pay_support(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º"""
    await message.answer(
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–ø–ª–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support"
    ) 